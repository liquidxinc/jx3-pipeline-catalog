# Global requirements
jxRequirements:
  cluster:
    project: needs-a-project-id
  ingress:
    domain: svc.cluster.local
    externalDNS: true
    namespaceSubDomain: .default.
    serviceType: ClusterIP
    tls:
      email: cicd@liquidx.com
      enabled: true
      production: true
      secretName: tls-env-wildcard

# Defines whether this should be a Deployment, Job, CronJob, or KNative Service
# options: deployment, job, cronjob, kservice
type: deployment

# Knative Service specific config options
kservice:
  timeoutSeconds: 600
  autoScaling:
    class: kpa.autoscaling.knative.dev
    metric: concurrency
    softLimit: "1"
    hardLimit: "0"
    maxScale: "10"

# CronJob specific config options
cronjob:
  # Once per hour
  schedule: "0 * * * *"

# Horizontally scale the application
replicaCount: 1

# Modify metadata for different resources
metadata:
  deployment:
    annotations:
      ad.datadoghq.com/REPLACE_ME_APP_NAME.logs: '[{"source": "deployment", "service": "REPLACE_ME_APP_NAME"}]'
  kservice:
    annotations:
      ad.datadoghq.com/REPLACE_ME_APP_NAME.logs: '[{"source": "knative", "service": "REPLACE_ME_APP_NAME"}]'
  job:
    annotations:
      ad.datadoghq.com/REPLACE_ME_APP_NAME.logs: '[{"source": "job, "service": "REPLACE_ME_APP_NAME"}]'
  cronjob:
    annotations:
      ad.datadoghq.com/REPLACE_ME_APP_NAME.logs: '[{"source": "cronjob, "service": "REPLACE_ME_APP_NAME"}]'
  service: {}
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/limit-rpm: "600"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "Content-Security-Policy: default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';";
        more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
        more_set_headers "Feature-Policy: camera 'none'; microphone 'none'; geolocation 'none'; encrypted-media 'none'; payment 'none'; speaker 'none'; usb 'none';";

# Image configuration
image:
  repository: draft
  tag: dev
  pullPolicy: IfNotPresent
  imagePullSecrets:
  - name: tekton-container-registry-auth

# Define resources for the container
resources:
  default:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

# Provide custom env here
env:
  default:
  - name: LQX_CONFIG_PATH
    value: /etc/REPLACE_ME_APP_NAME/config;./config
  - name: LQX_VAULT_ADDR
    value: https://vault.secret-infra:8200
  - name: LQX_VAULT_CACERT
    value: /etc/vault/cacert/ca.crt
  - name: LQX_VAULT_SKIPVERIFY
    value: 'false'
  - name: LQX_VAULT_ROLE
    value: secret-infra

# Configuration for the service resource
service:
  enabled: true
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http

# Config for the liveness probe
livenessProbe:
  httpGet:
    path: /api/v1/ops/healthcheck
    port: 8000
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

# Config for the readiness probe
readinessProbe:
  httpGet:
    path: /api/v1/ops/healthcheck
    port: 8000
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

# Fill this section if deploying a custom certificate
tls:
  certificate:
    enabled: false
    issuerName: ""
    issuerKind: ""

# Config for ingress
ingress:
  enabled: true
  extraURLs: []

# Execution command
command:
- sh
- -c
- npm start

# Add any additional volumes here
extraVolumes:
- name: config-files
  secret:
    secretName: REPLACE_ME_APP_NAME-config-files
- name: vault-tls
  secret:
    secretName: vault-tls

# Add any additional volume mounts here
extraVolumeMounts:
  default:
  - name: config-files
    mountPath: /etc/REPLACE_ME_APP_NAME/config
  - name: vault-tls
    mountPath: /etc/vault/cacert

# Service account options to control links to e.g. IAM or other auth systems
serviceAccount:
  # Enter the name of the IAM role this SA should have access to
  # The name will be prefixed with "<env name>-", e.g. "s3readwriter" will turn
  # into "development-s3readwriter" to allow for env-specific roles.
  iam:
    roleName: ""
